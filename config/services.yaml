# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(APP_HOST): ''
    env(APP_SCHEME): 'https'
    locale: 'pl'
    fallback_locale: 'en'
    frontend_base_url: '%env(FRONTEND_BASE_URL)%'
    assets_base_url: '%env(ASSETS_BASE_URL)%'
    upload_templates_path: '%kernel.project_dir%/var/storage/templates'
    mailer_filesystem_path: '%kernel.project_dir%/var/storage/emails'
    extracted_templates_path: '%kernel.project_dir%/var/storage/templates/extracted'
    templates_public_path: '%kernel.project_dir%/public/assets/templates'
    media_public_path: '%kernel.project_dir%/public/media'
    router.request_context.host: '%env(APP_HOST)%'
    router.request_context.scheme: '%env(APP_SCHEME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\Infrastructure\:
        resource: '../src/Infrastructure/*'
        exclude: '../src/Infrastructure/{Feature,Tests,Kernel.php}'

    App\Infrastructure\Security\EventSubscriber\PermissionListener:
        class: App\Infrastructure\Security\EventSubscriber\PermissionListener

    App\Infrastructure\Bus\CommandBusInterface:
      class: App\Infrastructure\Bus\CommandBus
      arguments:
        $middleware:
          - '@App\Infrastructure\Bus\Middleware\QueueMiddleware'
          - '@App\Infrastructure\Bus\Middleware\LoggerMiddleware'
          - '@tactician.middleware.validator'
          - '@tactician.middleware.locking'
          - '@tactician.middleware.doctrine'
          - '@tactician.middleware.command_handler'

    App\Infrastructure\Queue\Bus\QueuedCommandBus:
        class: App\Infrastructure\Queue\Bus\QueuedCommandBus
        arguments:
          $middleware:
            - '@App\Infrastructure\Bus\Middleware\LoggerMiddleware'
            - '@tactician.middleware.validator'
            - '@tactician.middleware.locking'
            - '@tactician.middleware.command_handler'

    App\Application\Handler\:
      resource: '../src/Application/Handler'
      tags:
          - { name: tactician.handler, typehints: true }

    App\Infrastructure\Queue\Worker\CommandWorker:
        public: true
        autowire: true
        tags:
            - { name: "dtc_queue.worker" }

    App\Infrastructure\Campaign\Contracts\TransportInterface:
      class: App\Infrastructure\Campaign\Transport\SwitfMailTransport
      autowire: true

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\UI\Http\:
        resource: '../src/UI/Http'
        tags: ['controller.service_arguments']

    App\UI\Cli\:
        resource: '../src/UI/Cli'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
